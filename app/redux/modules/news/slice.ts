import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import extraReducers from './extraReducers';

// Cannot make this interface part of types.d.ts as it depends on an enum `SocialIdentityProviderAuthTypes`
export interface INewsState {
  articles: IArticle[];
  status: string | undefined;
  isLoading: boolean;
}

export const initialState: INewsState = {
  articles: [],
  status: undefined,
  isLoading: false,
};

export const slice = createSlice({
  name: 'news',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setNews: (state, action: PayloadAction<Partial<INewsState>>) => {
      return {
        ...state,
        ...action.payload,
      };
    },
    reset: state => {
      return {...initialState};
    },
    resetErrors: state => {
      state.errorMessages = undefined;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    extraReducers.forEach(reducer => reducer(builder));
  },
});

export const {setNews, reset, resetErrors} = slice.actions;

export default slice;
